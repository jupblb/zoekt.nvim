local M = {}
local config = require('zoekt.config')

-- Check if current directory is inside a git repository
local function is_git_repo()
  local git_dir = vim.fn.finddir('.git', '.;')
  return git_dir ~= ''
end

-- Get the git repository root directory
local function get_git_root()
  local git_dir = vim.fn.finddir('.git', '.;')
  if git_dir == '' then
    return nil
  end
  -- Get the parent directory of .git
  return vim.fn.fnamemodify(git_dir, ':h')
end

-- Create the post-commit hook content
local function create_hook_content()
  local index_path = config.get_option('index_path')

  -- Create a standalone shell script that doesn't depend on Neovim
  local hook_content = [[#!/usr/bin/env sh
# Auto-generated by zoekt.nvim
# This hook updates the Zoekt index after each commit

# Get the repository root
REPO_ROOT="$(git rev-parse --show-toplevel)"

# Check if zoekt-index is available
if ! command -v zoekt-index >/dev/null 2>&1; then
  echo "Warning: zoekt-index not found in PATH. Skipping index update."
  exit 0
fi

# Index the repository
echo "Updating Zoekt index..."
zoekt-index -index "]] .. index_path .. [[" "$REPO_ROOT"

exit 0
]]

  return hook_content
end

-- Install the git hook
function M.install_hook()
  -- Check if we're in a git repository
  if not is_git_repo() then
    vim.notify(
      'Not in a git repository',
      vim.log.levels.ERROR,
      { title = 'zoekt.nvim' }
    )
    return false
  end

  local git_root = get_git_root()
  if not git_root then
    vim.notify(
      'Could not find git repository root',
      vim.log.levels.ERROR,
      { title = 'zoekt.nvim' }
    )
    return false
  end

  -- Construct the hook path
  local hook_path = vim.fn.expand(git_root .. '/.git/hooks/post-commit')

  -- Create the hook content
  local hook_content = create_hook_content()

  -- Write the hook file
  local file = io.open(hook_path, 'w')
  if not file then
    vim.notify(
      'Failed to create hook file: ' .. hook_path,
      vim.log.levels.ERROR,
      { title = 'zoekt.nvim' }
    )
    return false
  end

  file:write(hook_content)
  file:close()

  -- Make the hook executable
  vim.fn.system('chmod +x ' .. vim.fn.shellescape(hook_path))

  if vim.v.shell_error ~= 0 then
    vim.notify(
      'Failed to make hook executable',
      vim.log.levels.ERROR,
      { title = 'zoekt.nvim' }
    )
    return false
  end

  vim.notify(
    'Post-commit hook installed successfully at: ' .. hook_path,
    vim.log.levels.INFO,
    { title = 'zoekt.nvim' }
  )
  return true
end

return M
